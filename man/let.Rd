% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/let.R
\name{let}
\alias{let}
\title{Evaluate an expression in a modified context}
\usage{
let(expr, ...)
}
\arguments{
\item{expr}{Expression to evaluate. The input is captured before evaluation
in a context modified by assignments in \code{...}.}

\item{...}{Name-value pairs to assign in the evaluation context for \code{expr}.
Evaluated sequentially (before \code{expr}); you can refer to assignments from
previous arguments in subsequent ones.}
}
\value{
The value of evaluating \code{expr} in the modified context.
}
\description{
Similar to \code{\link[=with]{with()}}, but with an interface optimized for specifying single
values, sequential evaluation, and an argument order suitable for piping. Can
be used to avoid cluttering the environment with intermediate values, like a
compact local scope. Inspired by the \code{let} expression in Haskell.
}
\examples{
let(x = 1, x + x)

# Use earlier assignments
let(x = 2, y = x + 3, y * y)

# The equivalent local scope
local({
  x <- 2
  y <- x + 3
  y * y
})
}
\seealso{
\code{\link[=with]{with()}} and \code{\link[=local]{local()}} that perform similar context changes.
}
